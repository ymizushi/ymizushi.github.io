{"version":3,"sources":["components/App.tsx","serviceWorker.ts","index.tsx","image/top_image.jpg"],"names":["HeaderMenuItem","name","url","ListItem","styled","li","Link","a","href","target","rel","App","div","Header","header","HeaderTitle","span","HeaderIcon","i","className","Nav","nav","MenuList","ul","HeaderMenu","Img","img","src","topImage","alt","TopImage","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"kgDAqEA,SAASA,EAAeC,EAAcC,GACpC,IAAMC,EAAUC,IAAOC,GAAT,KAKRC,EAAMF,IAAOG,EAAT,KAUV,OACE,kBAACJ,EAAD,KACE,kBAACG,EAAD,CAAME,KAAMN,EAAKO,OAAO,SAASC,IAAI,uBAAwBT,IAuDpDU,MAxIf,WACE,IAAMA,EAAMP,IAAOQ,IAAV,KAIT,OACE,kBAACD,EAAD,KAQJ,WACE,IAAME,EAAST,IAAOU,OAAV,KAENC,EAAcX,IAAOY,KAAV,KAMXC,EAAab,IAAOc,EAAV,KAMhB,OACE,kBAACL,EAAD,KACE,kBAACE,EAAD,iBAGA,uBAAGP,KAAK,+BAA+BC,OAAO,SAASC,IAAI,uBAAsB,kBAACO,EAAD,CAAYE,UAAU,yBACvG,uBAAGX,KAAK,6CAA6CC,OAAO,SAASC,IAAI,uBAAsB,kBAACO,EAAD,CAAYE,UAAU,iCACrH,uBAAGX,KAAK,6BAA6BC,OAAO,SAASC,IAAI,uBAAsB,kBAACO,EAAD,CAAYE,UAAU,wBAM3G,WACE,IAAMC,EAAMhB,IAAOiB,IAAV,KAIHC,EAAWlB,IAAOmB,GAAV,KAId,OACE,kBAACH,EAAD,KACE,kBAACE,EAAD,KACItB,EAAe,QAAS,yCACxBA,EAAe,OAAQ,+BACvBA,EAAe,OAAQ,0CAnBzBwB,IA9BAX,GAiFR,WACE,IAAMY,EAAKrB,IAAOsB,IAAT,KAMT,OACE,kBAACD,EAAD,CAAKE,IAAKC,IAAUC,IAAI,QAxFpBC,GAkHR,WACE,IAAMC,EAAS3B,IAAOQ,IAAV,KAMZ,OACE,kBAACmB,EAAD,qBAzHIA,KCHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEjJ5BC,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.a979fbb6.chunk.js","sourcesContent":["import React from 'react';\n\nimport styled from 'styled-components';\n\nimport topImage from '../image/top_image.jpg'\n\nfunction App() {\n  const App = styled.div`\n    width: 50em;\n    margin: 0.5em auto;\n  `\n  return (\n    <App >\n      { Header() }\n      { TopImage() }\n      { Footer() }\n    </App>\n  );\n}\n\nfunction Header() {\n  const Header = styled.header`\n  `\n  const HeaderTitle = styled.span`\n    display: block;\n    font-size: 3em;\n    float: left;\n  `\n\n  const HeaderIcon = styled.i`\n    margin: 0.5em 0.1em 0.1em 0.1em;\n    display: block;\n    float: right;\n  `\n\n  return (\n    <Header>\n      <HeaderTitle>\n        ymizushi\n      </HeaderTitle>\n      <a href=\"https://twitter.com/ymizushi\" target=\"_blank\" rel=\"noopener noreferrer\"><HeaderIcon className=\"fa fa-twitter fa-2x\" /></a>\n      <a href=\"https://www.facebook.com/yutamizushima1985\" target=\"_blank\" rel=\"noopener noreferrer\"><HeaderIcon className=\"fa fa-facebook-square fa-2x\" /></a>\n      <a href=\"http://github.com/ymizushi\" target=\"_blank\" rel=\"noopener noreferrer\"><HeaderIcon className=\"fa fa-github fa-2x\" /></a>\n      { HeaderMenu() }\n    </Header>\n  );\n}\n\nfunction HeaderMenu() {\n  const Nav = styled.nav`\n    clear: both;\n    float: right;\n  `\n  const MenuList = styled.ul`\n    font-size: 1.5em;\n    margin: 0.1em 0.5em 0.5em;\n  `\n  return (\n    <Nav>\n      <MenuList>\n        { HeaderMenuItem(\"About\", \"https://www.wantedly.com/users/316970\") }\n        { HeaderMenuItem(\"Blog\", \"http://ymizushi.hateblo.jp/\")}\n        { HeaderMenuItem(\"Memo\", \"http://ymizushi.github.io/tech-memo/\") }\n      </MenuList>\n    </Nav>\n  )\n\n}\n\nfunction HeaderMenuItem(name: string, url: string) {\n  const ListItem= styled.li`\n    display: inline;\n    margin: 0.5em;\n  `\n\n  const Link= styled.a`\n    text-decoration: none;\n    &:visited {\n      color: black;\n    }\n    &:hover {\n      text-decoration: underline;\n    }\n  `\n\n  return (\n    <ListItem>\n      <Link href={url} target=\"_blank\" rel=\"noopener noreferrer\">{ name }</Link>\n    </ListItem>\n  )\n\n}\n\n\nfunction TopImage() {\n  const Img= styled.img`\n    display: block;\n    width: 45em;\n    float: center;\n    margin: 0 auto;\n  `\n  return (\n    <Img src={topImage} alt=\"top\" />\n  );\n}\n\n\nfunction Works() {\n  const works = [{\n    src: \"\",\n    title: \"dtt\"\n  }];\n  const work = (w: {src: string, title: string }) => {\n    return (\n      <div>\n        <img alt={ w.title } src={ w.src} />\n        <div>{ w.title }</div>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      { works.map(w => work(w)) }\n    </div>\n  )\n}\n\nfunction Footer() {\n  const Footer = styled.div`\n    clear: both;\n    float: right;\n    margin: 0.5em;\n\n  `\n  return (\n    <Footer>\n      Â©ymizushi\n    </Footer>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'ress';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/top_image.0d4f8fdc.jpg\";"],"sourceRoot":""}